#!/bin/bash

# Retry function
retry() {
  local n=1
  local max_attempts=3
  local delay=5
  while true; do
    "$@" && break || {
      if [[ $n -lt $max_attempts ]]; then
        ((n++))
        echo "Command failed. Attempt $n/$max_attempts:"
        sleep $delay;
      else
        echo "The command has failed after $n attempts."
        return 1
      fi
    }
  done
}

# Update system
retry sudo apt-get update -y
retry sudo apt-get upgrade -y


# Function to set a random hostname
set_random_hostname() {
  random_string=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
  new_hostname="${random_string}.daucu.com"
  sudo hostnamectl set-hostname "$new_hostname"
  echo "Hostname set to $new_hostname"
}

# Check if hostnamectl command is available
if ! command -v hostnamectl &> /dev/null; then
  echo "hostnamectl command not found. This script requires systemd."
  exit 1
fi

# Get the current hostname
current_hostname=$(hostnamectl status --static)

# Check if the hostname is empty or not like anything.anything.anything
if [[ -z "$current_hostname" || ! "$current_hostname" =~ ^[a-z0-9]+\.[a-z0-9]+\.[a-z0-9]+$ ]]; then
  echo "Hostname is not set or does not match the pattern anything.anything.anything. Setting a random hostname..."
  set_random_hostname
else
  echo "Current hostname: $current_hostname"
fi


# Install Docker
retry sudo apt-get install -y docker.io

# Start Docker service
retry sudo systemctl start docker
retry sudo systemctl enable docker

# Initialize Docker Swarm
retry sudo docker swarm init

# Create Traefik configuration file
cat <<EOF | sudo tee ./traefik.yml
api:
  insecure: true
  dashboard: true

entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false

log:
  level: DEBUG
EOF

# Create Docker Compose file for Traefik
cat <<EOF | sudo tee docker-compose.yml
version: "3"

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    ports:
      - "80:80" # The HTTP port
      - "443:443" # The HTTPS port
      - "8080:8080" # The Web UI (enabled by --api.insecure=true)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # So that Traefik can listen to the Docker events
      - "./traefik.yml:/traefik.yml:ro"
    command:
      - "--configFile=/traefik.yml"
EOF

# Deploy Traefik stack using Docker Compose
retry sudo docker stack deploy -c docker-compose.yml traefik

# Deploy daucu_frontend service
retry sudo docker service create \
  --name daucu_frontend \
  --publish 3000:3000 \
  --restart-condition any \
  --restart-delay 5s \
  --restart-max-attempts 3 \
  --restart-window 120s \
  daucu/daucu_frontend

# Create a Docker Compose file for MongoDB with a different name (mongo-stack.yml)
retry docker run -d \
  --name mongo \
  --restart always \
  -p 27017:27017 \
  -e MONGO_INITDB_ROOT_USERNAME=root \
  -e MONGO_INITDB_ROOT_PASSWORD=cuspufrlqlp \
  -v mongo-data:/data/db \
  mongo:latest


# Download Go executable
retry curl -Lo /usr/local/bin/daucu_backend https://get.daucu.com/backend/main

# Make the executable file executable
sudo chmod +x /usr/local/bin/daucu_backend

# Create systemd service file for the Go executable
cat <<EOF | sudo tee /etc/systemd/system/daucu_backend.service
[Unit]
Description=Daucu Backend Service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/daucu_backend
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd to recognize the new service
retry sudo systemctl daemon-reload

# Enable and start the new service
retry sudo systemctl enable daucu_backend
retry sudo systemctl start daucu_backend

echo "Setup completed successfully!"

# Output the message to browse to the frontend
echo "Setup completed successfully! You can browse the application at http://your_public_ip:3000"
